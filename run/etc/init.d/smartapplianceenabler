#!/bin/sh
### BEGIN INIT INFO
# Provides:          sae
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start sae daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# create PID directory for sae script - will be deleted on each reboot
if [ ! -d /var/run/sae ]; then
        mkdir /var/run/sae
        chown sae:sae /var/run/sae
fi

dir="/opt/sae"

# To enable remote debugging add the following options in cmd variable.
# You will then be able to use a java debugger on port 8000.
# -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n


# Production Version - with UPNP Discovery (SHM will discover SAE)
cmd="/usr/bin/java -Dserver.port=8080 -Dserver.address=0.0.0.0 -Djava.awt.headless=true -Xms128M -Xmx256m -Dlogging.config=/opt/sae/logback-spring.xml -Dsae.pidfile=/var/run/sae/smartapplianceenabler.pid -Dsae.home=/opt/sae -Dsae.discovery.disable=false -jar /opt/sae/SmartApplianceEnabler.war"

# DEBUG Version - without UPNP Discovery (SHM will NOT discover SAE)
#cmd="/usr/bin/java -Dserver.port=8080 -Dserver.address=0.0.0.0 -Djava.awt.headless=true -Xms128M -Xmx256m -Dlogging.config=/opt/sae/logback-spring.xml -Dsae.pidfile=/var/run/sae/smartapplianceenabler.pid -Dsae.home=/opt/sae -Dsae.discovery.disable=true -jar /opt/sae/SmartApplianceEnabler.war"

user="sae"

name=`basename $0`
pid_file="/var/run/sae/$name.pid"
stdout_log="/var/log/$name.log"
stderr_log="/var/log/$name.err"

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps -p `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting $name"
        cd "$dir"
        if [ -z "$user" ]; then
            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
        fi
        echo $! > "$pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill `get_pid`
        for i in 1 2 3 4 5 6 7 8 9 10
        # for i in `seq 10`
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
