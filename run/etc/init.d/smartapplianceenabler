#!/bin/sh
### BEGIN INIT INFO
# Provides:          sae
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start sae daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

NAME=`basename $0`
if [ -f /etc/default/$NAME ]; then
	. /etc/default/$NAME
fi

SAE_JAR=`/usr/bin/find $SAE_HOME -name "SmartApplianceEnabler-*ar" | /usr/bin/head -n 1`
if [ -z "$SAE_JAR" ]; then
	echo "$SAE_HOME/SmartApplianceEnabler-*ar was not found"
	exit 1
fi

CMD="$JAVA_BIN $JAVA_OPTS -Dlogging.config=$LOGGING_CONFIG -Dsae.pidfile=$PID_FILE -Dsae.home=$SAE_HOME -jar $SAE_JAR"

# create PID file directory - will be deleted on each reboot
if [ ! -f /var/run/sae ]; then
        mkdir -p $PID_FILE_DIR
        chown $USER:$GROUP $PID_FILE_DIR
fi

# The PID file will be created by the Java process during startup. At this time the Smart Appliance Enabler is not
# fully running but at least the Java is up and running. If there are any problems later during startup it should show
# up in the Smart Appliance Enabler log file (/tmp/rolling-<date>.log)

get_pid() {
    cat "$PID_FILE"
}

is_running() {
    [ -f "$PID_FILE" ] && ps -p `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting $NAME ($SAE_JAR)"
        cd "$SAE_HOME"
        if [ -z "$USER" ]; then
            sudo $CMD >> "$STDOUT_LOG" 2>> "$STDERR_LOG" &
        else
            sudo -u "$USER" $CMD >> "$STDOUT_LOG" 2>> "$STDERR_LOG" &
        fi
        for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60; do
            if is_running; then
                break
            fi
            echo -n "."
            sleep 1
        done
        echo
        if is_running; then
            echo "Started"
        else
            echo "Unable to start, see $STDOUT_LOG and $STDERR_LOG"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $NAME.."
        kill `get_pid`
        for i in 1 2 3 4 5 6 7 8 9 10; do
            if ! is_running; then
                break
            fi
            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$PID_FILE" ]; then
                rm "$PID_FILE"
            fi
        fi
    else
        echo "Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
